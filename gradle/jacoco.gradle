apply plugin: 'jacoco'

//jacoco {
//    toolVersion = "0.7.2.201409121644"
//}

//requires gradle 2.13, not stable yet. Robolectric should be fixed!!
jacoco {
    toolVersion = "0.7.6.201602180812"
}
android {
    testOptions {
        unitTests.all {
            jacoco {
                includeNoLocationClasses = true
            }
        }
    }
}

project.afterEvaluate {
    // Grab all build types and product flavors
    def buildTypes = android.buildTypes.collect { type -> type.name }
    def productFlavors = android.productFlavors.collect { flavor -> flavor.name }

    // When no product flavors defined, use empty
    if (!productFlavors) productFlavors.add('')

    //double for loop to go through all product flavors & build types
    productFlavors.each { productFlavorName ->
        buildTypes.each { buildTypeName ->
            def sourceName, sourcePath
            //If there is no build flavor defined sourceName & sourcePath = build type
            if (!productFlavorName) {
                sourceName = sourcePath = "${buildTypeName}"
            } else {
                //else path is a level deeper and path/name is for example freeDebug & free/debug
                sourceName = "${productFlavorName}${buildTypeName.capitalize()}"
                sourcePath = "${productFlavorName}/${buildTypeName}"
            }

            //gradle task name
            def testTaskName = "test${sourceName.capitalize()}UnitTest"

            // Create coverage task of form 'testFlavorTypeCoverage' depending on 'testFlavorTypeUnitTest'
            task "${testTaskName}Coverage"(type: JacocoReport, dependsOn: "$testTaskName") {
                group = "Reporting"
                description =
                    "Generate Jacoco coverage reports on the ${sourceName.capitalize()} build."

                //Directory where the compiled class files are
                classDirectories =
                    fileTree(dir: "${project.buildDir}/intermediates/classes/${sourcePath}",
                        excludes: ['**/R.class',
                                   '**/R$*.class',
                                   '**/*$ViewInjector*.*',
                                   '**/*$ViewBinder*.*',
                                   '**/BuildConfig.*',
                                   '**/Manifest*.*',
                                   '**/*$Lambda$*.*', // Jacoco can not handle several "$" in class name.
                                   '**/*Module.*', // Modules for Dagger.
                                   '**/*Dagger*.*', // Dagger auto-generated code.
                                   '**/*MembersInjector*.*', // Dagger auto-generated code.
                                   '**/*_Provide*Factory*.*',
                                   '**/*_Factory.*', //Dagger auto-generated code
                                   '**/*$*$*.*' // Anonymous classes generated by kotlin
                        ])

                //Source code directories
                def coverageSourceDirs = ["src/main/java",
                                          "src/$productFlavorName/java",
                                          "src/$buildTypeName/java",
                                          // We don't need this because we added kotlin to java sourceDirs in app/build,gradle
                                          //                    "src/main/kotlin",
                                          //                    "src/$productFlavorName/kotlin",
                                          //                    "src/$buildTypeName/kotlin"

                ]

                //Assign the paramaters to jacoco
                additionalSourceDirs = files(coverageSourceDirs)
                sourceDirectories = files(coverageSourceDirs)
                executionData = files("${project.buildDir}/jacoco/${testTaskName}.exec")

                //reports jacoco should output
                reports {
                    xml.enabled = true
                    html.enabled = true
                }
            }
        }
    }
}